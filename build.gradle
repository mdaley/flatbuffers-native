plugins {
    id 'java'
    id 'org.ajoberstar.grgit' version '4.0.1' apply false
}

import org.ajoberstar.grgit.Grgit;
import org.eclipse.jgit.errors.RepositoryNotFoundException;

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

def flatbuffersTag = "v1.12.0"

def flatbuffersRemoteUri = "git@github.com:google/flatbuffers.git"
def flatbuffersRepoPath = "$buildDir/flatbuffers"
def Grgit flatbuffersRepo

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.1'
}

test {
    useJUnitPlatform()
}

task ensureFlatbuffersSource {
    try {
        flatbuffersRepo = Grgit.open(dir: flatbuffersRepoPath)
        println("Using existing flatbuffers in " + flatbuffersRepoPath)
    } catch (RepositoryNotFoundException e) {
        println("Cloning flatbuffers repo from " + flatbuffersRemoteUri + " ...")
        flatbuffersRepo = Grgit.clone(dir: flatbuffersRepoPath, uri: flatbuffersRemoteUri)
        println("Clone complete.")
    }
    println(flatbuffersRepo.describe())
}

task ensureFlatbuffersCommitOrTag {
    println("Set flatbuffers repo to correct tag")
    flatbuffersRepo.clean(directories: true, ignore: false)
    flatbuffersRepo.checkout(branch: "master")
    flatbuffersRepo.pull()
    flatbuffersRepo.checkout(branch: flatbuffersTag)
}

ensureFlatbuffersCommitOrTag.dependsOn(ensureFlatbuffersSource)

task buildFlatbuffers {
    println("Executing flatbuffers compilation...")
    exec {
        executable "echo"
        args "Hello"
    }
    println("Flatbuffers compilation completed")
}

buildFlatbuffers.dependsOn(ensureFlatbuffersCommitOrTag)

build.dependsOn ensureFlatbuffersSource
