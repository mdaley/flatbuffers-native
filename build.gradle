plugins {
    id 'java'
}

group 'com.sequsoft.flatbuffers-native'
version '1.12.0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task displayProjectProperties {

    doLast() {

        for(Map.Entry p: project.getProperties()) {
            println(p.toString() + "\n");
        }
    }
}

class DockerBuilder extends AbstractExecTask<DockerBuilder> {
    private String source
    private String image

    DockerBuilder() {
        super(DockerBuilder.class)
    }

    @Option(option = "source", description = "The name of the source Dockerfile")
    void setSource(String source) {
        this.source = source
    }

    @Option(option = "image", description = "name of the image that will be produced")
    void setImage(String image) {
        this.image = image
    }

    @Input
    String getSource() {
        return source
    }

    @Input
    String getImage() {
        return image
    }

    @TaskAction
    @Override
    protected void exec() {
        commandLine("docker", "build", "-t", image, "-f", source, ".")
        super.exec()
    }
}

List<Task> dockerBuildTasks = new ArrayList<>();

task mytask() {
    println "Hello!"
}

file("./platforms").eachDir { os ->
    file(os).eachDir { arch ->
        println arch.path
        def osName = os.toString().substring(os.toString().lastIndexOf("/") + 1)
        def archName = arch.toString().substring(arch.toString().lastIndexOf("/") + 1)
        def name = "dockerBuild_${osName}_${archName}"
        println name

        if (file("${arch.path}/Dockerfile").exists()) {
            def innerTask = tasks.register(name, DockerBuilder) {
                source = "${arch.path}/Dockerfile"
                image = "fbbuild-${osName}-${archName}"
            }

            dockerBuildTasks.add(innerTask)
        }
    }
}

build.dependsOn  {
    mytask
    dockerBuildTasks
}